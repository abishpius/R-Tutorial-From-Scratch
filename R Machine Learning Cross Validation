#!/usr/bin/env RScript

#Generate Random Predictors
set.seed(1996, sample.kind="Rounding")
n <- 1000
p <- 10000
x <- matrix(rnorm(n*p), n, p)
colnames(x) <- paste("x", 1:ncol(x), sep = "_")
y <- rbinom(n, 1, 0.5) %>% factor()

x_subset <- x[ ,sample(p, 100)]

#Use cross-validation using logistic regression to fit the model
fit <- train(x_subset, y, method = "glm")
fit$results

#Now, instead of using a random selection of predictors, we are going to search for those that are most predictive of the outcome. We can do this by comparing the values for the y=1 group to those in the y=0 group, for each predictor, using a t-test.

install.packages("BiocManager")
BiocManager::install("genefilter")
library(genefilter)
tt <- colttests(x, y)
pvals <- tt$p.value

#Create an index ind with the column numbers of the predictors that were "statistically significantly" associated with y. Use a p-value cutoff of 0.01 to define "statistically significantly." How many predictors survive this cutoff?

ind <- which(pvals <= 0.01)
length(ind)

#Now re-run the cross-validation after redefinining x_subset to be the subset of x defined by the columns showing "statistically significant" association with y. What is the accuracy now?
x_subset <- x[,ind]
fit <- train(x_subset, y, method = "glm")
fit$results

#Re-run the cross-validation again, but this time using kNN. Try out the following grid k = seq(101, 301, 25) of tuning parameters. Make a plot of the resulting accuracies.
fit <- train(x_subset, y, method = "knn", tuneGrid = data.frame(k = seq(101, 301, 25)))
ggplot(fit)


#Use this dataset
set.seed(1995, sample.kind="Rounding")
indexes <- createResample(mnist_27$train$y, 10)

#How many times do 3, 4, and 7 appear in the first resampled index?
sum(indexes[[1]] == 3)
sum(indexes[[1]] == 4)
sum(indexes[[1]] == 7)

#What is the total number of times that 7 appears in all of the resampled indexes?
x=sapply(indexes, function(ind){
	sum(ind == 7)
})
sum(x)

#Generate a random dataset
y <- rnorm(100, 0, 1)

#Set the seed to 1 and perform a Monte Carlo simulation with 10,000 repetitions, generating the random dataset and estimating the 75th quantile each time. What is the expected value and standard error of the 75th quantile?
set.seed(1, sample.kind = "Rounding")
B <- 10000
q_75 <- replicate(B, {
	y <- rnorm(100, 0, 1)
	quantile(y, 0.75)
})

mean(q_75)
sd(q_75)

#Set the seed to 1 again after generating y and use 10000 bootstrap samples to estimate the expected value and standard error of the 75th quantile.
set.seed(1, sample.kind="Rounding")
indexes <- createResample(y, 10000)
q_75_star <- sapply(indexes, function(ind){
	y_star <- y[ind]
	quantile(y_star, 0.75)
})
mean(q_75_star)
sd(q_75_star)

